/**
 * generated by Xtext 2.12.0
 */
package tr.edu.metu.ceng.megamodel.sedml.sedml.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import tr.edu.metu.ceng.megamodel.sedml.sedml.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SedmlFactoryImpl extends EFactoryImpl implements SedmlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SedmlFactory init()
  {
    try
    {
      SedmlFactory theSedmlFactory = (SedmlFactory)EPackage.Registry.INSTANCE.getEFactory(SedmlPackage.eNS_URI);
      if (theSedmlFactory != null)
      {
        return theSedmlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SedmlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SedmlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SedmlPackage.SED_BASE: return createSEDBase();
      case SedmlPackage.CHANGE: return createchange();
      case SedmlPackage.TARGET: return createtarget();
      case SedmlPackage.CHANGE_ATTRIBUTE: return createchangeAttribute();
      case SedmlPackage.COMPUTE_CHANGE: return createcomputeChange();
      case SedmlPackage.ADD_XML: return createaddXML();
      case SedmlPackage.CHANGE_XML: return createchangeXML();
      case SedmlPackage.NEW_XML: return createnewXML();
      case SedmlPackage.SED_ML: return createsedML();
      case SedmlPackage.LIST_OF_DATA_DESCRIPTIONS: return createlistOfDataDescriptions();
      case SedmlPackage.DATA_DESCRIPTION: return createdataDescription();
      case SedmlPackage.DIMENSION_DESCRIPTION: return createdimensionDescription();
      case SedmlPackage.LIST_OF_DATA_SOURCES: return createlistOfDataSources();
      case SedmlPackage.DATA_SOURCE: return createdataSource();
      case SedmlPackage.LIST_OF_DATA_SLICES: return createlistOfDataSlices();
      case SedmlPackage.SLICE: return createslice();
      case SedmlPackage.LIST_OF_HYPOTHESES: return createlistOfHypotheses();
      case SedmlPackage.HYPOTHESIS: return createhypothesis();
      case SedmlPackage.RELATIONAL_QUERY: return createRelationalQuery();
      case SedmlPackage.QUERY1: return createQuery1();
      case SedmlPackage.QUERY2: return createQuery2();
      case SedmlPackage.QUERY3: return createQuery3();
      case SedmlPackage.COHERENCE_LINK: return createCoherenceLink();
      case SedmlPackage.MECH_HYPOTHESIS: return createMechHypothesis();
      case SedmlPackage.EVIDENCE: return createEvidence();
      case SedmlPackage.TEMPORAL_PATTERN: return createTemporalPattern();
      case SedmlPackage.CONDITION: return createCondition();
      case SedmlPackage.EVENT: return createEvent();
      case SedmlPackage.SIMULTANEOUS: return createSimultaneous();
      case SedmlPackage.DISPERSED: return createDispersed();
      case SedmlPackage.LIST_OF_MODELS: return createlistOfModels();
      case SedmlPackage.MODEL: return createmodel();
      case SedmlPackage.LIST_OF_CHANGES: return createlistOfChanges();
      case SedmlPackage.DATA_GENERATOR: return createdataGenerator();
      case SedmlPackage.LIST_OF_PARAMETERS: return createlistOfParameters();
      case SedmlPackage.PARAMETER: return createparameter();
      case SedmlPackage.LIST_OF_VARIABLES: return createlistOfVariables();
      case SedmlPackage.VARIABLE: return createvariable();
      case SedmlPackage.LIST_OF_TASKS: return createlistOfTasks();
      case SedmlPackage.REPEATED_TASK: return createrepeatedTask();
      case SedmlPackage.LIST_OF_RANGES: return createlistOfRanges();
      case SedmlPackage.RANGE: return createrange();
      case SedmlPackage.UNIFORM_RANGE: return createuniformRange();
      case SedmlPackage.VECTOR_RANGE: return createvectorRange();
      case SedmlPackage.VALUE: return createvalue();
      case SedmlPackage.FUNCTIONAL_RANGE: return createfunctionalRange();
      case SedmlPackage.ABSTRACT_TASK: return createabstractTask();
      case SedmlPackage.SUB_TASK: return createsubTask();
      case SedmlPackage.TASK: return createtask();
      case SedmlPackage.LIST_OF_DATA_GENERATORS: return createlistOfDataGenerators();
      case SedmlPackage.MATH: return createmath();
      case SedmlPackage.LIST_OF_OUTPUTS: return createlistOfOutputs();
      case SedmlPackage.OUTPUT: return createoutput();
      case SedmlPackage.PLOT2_D: return createplot2D();
      case SedmlPackage.PLOT3_D: return createplot3D();
      case SedmlPackage.REPORT: return createreport();
      case SedmlPackage.LIST_OF_DATA_SETS: return createlistOfDataSets();
      case SedmlPackage.DATA_SET: return createdataSet();
      case SedmlPackage.LIST_OF_SURFACES: return createlistOfSurfaces();
      case SedmlPackage.LIST_OF_CURVES: return createlistOfCurves();
      case SedmlPackage.CURVE: return createcurve();
      case SedmlPackage.LIST_OF_SIMULATIONS: return createlistOfSimulations();
      case SedmlPackage.SIMULATION: return createsimulation();
      case SedmlPackage.UNIFORM_TIME_COURSE: return createuniformTimeCourse();
      case SedmlPackage.ONE_STEP: return createoneStep();
      case SedmlPackage.ALGORITHM: return createalgorithm();
      case SedmlPackage.LIST_OF_ALGORITHM_PARAMETERS: return createlistOfAlgorithmParameters();
      case SedmlPackage.ALGORITHM_PARAMETER: return createalgorithmParameter();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SedmlPackage.FUNCTION:
        return createFunctionFromString(eDataType, initialValue);
      case SedmlPackage.LEVELS:
        return createLevelsFromString(eDataType, initialValue);
      case SedmlPackage.EXPRESSION:
        return createExpressionFromString(eDataType, initialValue);
      case SedmlPackage.LINKS:
        return createLinksFromString(eDataType, initialValue);
      case SedmlPackage.TEMPORAL:
        return createTemporalFromString(eDataType, initialValue);
      case SedmlPackage.LOGICAL:
        return createLogicalFromString(eDataType, initialValue);
      case SedmlPackage.COHERENCE:
        return createCoherenceFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SedmlPackage.FUNCTION:
        return convertFunctionToString(eDataType, instanceValue);
      case SedmlPackage.LEVELS:
        return convertLevelsToString(eDataType, instanceValue);
      case SedmlPackage.EXPRESSION:
        return convertExpressionToString(eDataType, instanceValue);
      case SedmlPackage.LINKS:
        return convertLinksToString(eDataType, instanceValue);
      case SedmlPackage.TEMPORAL:
        return convertTemporalToString(eDataType, instanceValue);
      case SedmlPackage.LOGICAL:
        return convertLogicalToString(eDataType, instanceValue);
      case SedmlPackage.COHERENCE:
        return convertCoherenceToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SEDBase createSEDBase()
  {
    SEDBaseImpl sedBase = new SEDBaseImpl();
    return sedBase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public change createchange()
  {
    changeImpl change = new changeImpl();
    return change;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public target createtarget()
  {
    targetImpl target = new targetImpl();
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public changeAttribute createchangeAttribute()
  {
    changeAttributeImpl changeAttribute = new changeAttributeImpl();
    return changeAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public computeChange createcomputeChange()
  {
    computeChangeImpl computeChange = new computeChangeImpl();
    return computeChange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public addXML createaddXML()
  {
    addXMLImpl addXML = new addXMLImpl();
    return addXML;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public changeXML createchangeXML()
  {
    changeXMLImpl changeXML = new changeXMLImpl();
    return changeXML;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public newXML createnewXML()
  {
    newXMLImpl newXML = new newXMLImpl();
    return newXML;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public sedML createsedML()
  {
    sedMLImpl sedML = new sedMLImpl();
    return sedML;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfDataDescriptions createlistOfDataDescriptions()
  {
    listOfDataDescriptionsImpl listOfDataDescriptions = new listOfDataDescriptionsImpl();
    return listOfDataDescriptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dataDescription createdataDescription()
  {
    dataDescriptionImpl dataDescription = new dataDescriptionImpl();
    return dataDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dimensionDescription createdimensionDescription()
  {
    dimensionDescriptionImpl dimensionDescription = new dimensionDescriptionImpl();
    return dimensionDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfDataSources createlistOfDataSources()
  {
    listOfDataSourcesImpl listOfDataSources = new listOfDataSourcesImpl();
    return listOfDataSources;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dataSource createdataSource()
  {
    dataSourceImpl dataSource = new dataSourceImpl();
    return dataSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfDataSlices createlistOfDataSlices()
  {
    listOfDataSlicesImpl listOfDataSlices = new listOfDataSlicesImpl();
    return listOfDataSlices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public slice createslice()
  {
    sliceImpl slice = new sliceImpl();
    return slice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfHypotheses createlistOfHypotheses()
  {
    listOfHypothesesImpl listOfHypotheses = new listOfHypothesesImpl();
    return listOfHypotheses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public hypothesis createhypothesis()
  {
    hypothesisImpl hypothesis = new hypothesisImpl();
    return hypothesis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationalQuery createRelationalQuery()
  {
    RelationalQueryImpl relationalQuery = new RelationalQueryImpl();
    return relationalQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Query1 createQuery1()
  {
    Query1Impl query1 = new Query1Impl();
    return query1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Query2 createQuery2()
  {
    Query2Impl query2 = new Query2Impl();
    return query2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Query3 createQuery3()
  {
    Query3Impl query3 = new Query3Impl();
    return query3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CoherenceLink createCoherenceLink()
  {
    CoherenceLinkImpl coherenceLink = new CoherenceLinkImpl();
    return coherenceLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MechHypothesis createMechHypothesis()
  {
    MechHypothesisImpl mechHypothesis = new MechHypothesisImpl();
    return mechHypothesis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Evidence createEvidence()
  {
    EvidenceImpl evidence = new EvidenceImpl();
    return evidence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemporalPattern createTemporalPattern()
  {
    TemporalPatternImpl temporalPattern = new TemporalPatternImpl();
    return temporalPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Simultaneous createSimultaneous()
  {
    SimultaneousImpl simultaneous = new SimultaneousImpl();
    return simultaneous;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dispersed createDispersed()
  {
    DispersedImpl dispersed = new DispersedImpl();
    return dispersed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfModels createlistOfModels()
  {
    listOfModelsImpl listOfModels = new listOfModelsImpl();
    return listOfModels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public model createmodel()
  {
    modelImpl model = new modelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfChanges createlistOfChanges()
  {
    listOfChangesImpl listOfChanges = new listOfChangesImpl();
    return listOfChanges;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dataGenerator createdataGenerator()
  {
    dataGeneratorImpl dataGenerator = new dataGeneratorImpl();
    return dataGenerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfParameters createlistOfParameters()
  {
    listOfParametersImpl listOfParameters = new listOfParametersImpl();
    return listOfParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public parameter createparameter()
  {
    parameterImpl parameter = new parameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfVariables createlistOfVariables()
  {
    listOfVariablesImpl listOfVariables = new listOfVariablesImpl();
    return listOfVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public variable createvariable()
  {
    variableImpl variable = new variableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfTasks createlistOfTasks()
  {
    listOfTasksImpl listOfTasks = new listOfTasksImpl();
    return listOfTasks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public repeatedTask createrepeatedTask()
  {
    repeatedTaskImpl repeatedTask = new repeatedTaskImpl();
    return repeatedTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfRanges createlistOfRanges()
  {
    listOfRangesImpl listOfRanges = new listOfRangesImpl();
    return listOfRanges;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public range createrange()
  {
    rangeImpl range = new rangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public uniformRange createuniformRange()
  {
    uniformRangeImpl uniformRange = new uniformRangeImpl();
    return uniformRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public vectorRange createvectorRange()
  {
    vectorRangeImpl vectorRange = new vectorRangeImpl();
    return vectorRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public value createvalue()
  {
    valueImpl value = new valueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public functionalRange createfunctionalRange()
  {
    functionalRangeImpl functionalRange = new functionalRangeImpl();
    return functionalRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public abstractTask createabstractTask()
  {
    abstractTaskImpl abstractTask = new abstractTaskImpl();
    return abstractTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public subTask createsubTask()
  {
    subTaskImpl subTask = new subTaskImpl();
    return subTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public task createtask()
  {
    taskImpl task = new taskImpl();
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfDataGenerators createlistOfDataGenerators()
  {
    listOfDataGeneratorsImpl listOfDataGenerators = new listOfDataGeneratorsImpl();
    return listOfDataGenerators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public math createmath()
  {
    mathImpl math = new mathImpl();
    return math;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfOutputs createlistOfOutputs()
  {
    listOfOutputsImpl listOfOutputs = new listOfOutputsImpl();
    return listOfOutputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public output createoutput()
  {
    outputImpl output = new outputImpl();
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public plot2D createplot2D()
  {
    plot2DImpl plot2D = new plot2DImpl();
    return plot2D;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public plot3D createplot3D()
  {
    plot3DImpl plot3D = new plot3DImpl();
    return plot3D;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public report createreport()
  {
    reportImpl report = new reportImpl();
    return report;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfDataSets createlistOfDataSets()
  {
    listOfDataSetsImpl listOfDataSets = new listOfDataSetsImpl();
    return listOfDataSets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dataSet createdataSet()
  {
    dataSetImpl dataSet = new dataSetImpl();
    return dataSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfSurfaces createlistOfSurfaces()
  {
    listOfSurfacesImpl listOfSurfaces = new listOfSurfacesImpl();
    return listOfSurfaces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfCurves createlistOfCurves()
  {
    listOfCurvesImpl listOfCurves = new listOfCurvesImpl();
    return listOfCurves;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public curve createcurve()
  {
    curveImpl curve = new curveImpl();
    return curve;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfSimulations createlistOfSimulations()
  {
    listOfSimulationsImpl listOfSimulations = new listOfSimulationsImpl();
    return listOfSimulations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public simulation createsimulation()
  {
    simulationImpl simulation = new simulationImpl();
    return simulation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public uniformTimeCourse createuniformTimeCourse()
  {
    uniformTimeCourseImpl uniformTimeCourse = new uniformTimeCourseImpl();
    return uniformTimeCourse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public oneStep createoneStep()
  {
    oneStepImpl oneStep = new oneStepImpl();
    return oneStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public algorithm createalgorithm()
  {
    algorithmImpl algorithm = new algorithmImpl();
    return algorithm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public listOfAlgorithmParameters createlistOfAlgorithmParameters()
  {
    listOfAlgorithmParametersImpl listOfAlgorithmParameters = new listOfAlgorithmParametersImpl();
    return listOfAlgorithmParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public algorithmParameter createalgorithmParameter()
  {
    algorithmParameterImpl algorithmParameter = new algorithmParameterImpl();
    return algorithmParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunctionFromString(EDataType eDataType, String initialValue)
  {
    Function result = Function.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFunctionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Levels createLevelsFromString(EDataType eDataType, String initialValue)
  {
    Levels result = Levels.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLevelsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpressionFromString(EDataType eDataType, String initialValue)
  {
    Expression result = Expression.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertExpressionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Links createLinksFromString(EDataType eDataType, String initialValue)
  {
    Links result = Links.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLinksToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Temporal createTemporalFromString(EDataType eDataType, String initialValue)
  {
    Temporal result = Temporal.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTemporalToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Logical createLogicalFromString(EDataType eDataType, String initialValue)
  {
    Logical result = Logical.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLogicalToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Coherence createCoherenceFromString(EDataType eDataType, String initialValue)
  {
    Coherence result = Coherence.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCoherenceToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SedmlPackage getSedmlPackage()
  {
    return (SedmlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SedmlPackage getPackage()
  {
    return SedmlPackage.eINSTANCE;
  }

} //SedmlFactoryImpl
