/**
 * generated by Xtext 2.12.0
 */
package tr.edu.metu.ceng.megamodel.sedml.sedml.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import tr.edu.metu.ceng.megamodel.sedml.sedml.SedmlPackage;
import tr.edu.metu.ceng.megamodel.sedml.sedml.model;
import tr.edu.metu.ceng.megamodel.sedml.sedml.task;
import tr.edu.metu.ceng.megamodel.sedml.sedml.uniformTimeCourse;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>task</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tr.edu.metu.ceng.megamodel.sedml.sedml.impl.taskImpl#getModelReference <em>Model Reference</em>}</li>
 *   <li>{@link tr.edu.metu.ceng.megamodel.sedml.sedml.impl.taskImpl#getSimulationReference <em>Simulation Reference</em>}</li>
 * </ul>
 *
 * @generated
 */
public class taskImpl extends abstractTaskImpl implements task
{
  /**
   * The cached value of the '{@link #getModelReference() <em>Model Reference</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelReference()
   * @generated
   * @ordered
   */
  protected model modelReference;

  /**
   * The cached value of the '{@link #getSimulationReference() <em>Simulation Reference</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimulationReference()
   * @generated
   * @ordered
   */
  protected uniformTimeCourse simulationReference;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected taskImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SedmlPackage.Literals.TASK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public model getModelReference()
  {
    return modelReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModelReference(model newModelReference, NotificationChain msgs)
  {
    model oldModelReference = modelReference;
    modelReference = newModelReference;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SedmlPackage.TASK__MODEL_REFERENCE, oldModelReference, newModelReference);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setModelReference(model newModelReference)
  {
    if (newModelReference != modelReference)
    {
      NotificationChain msgs = null;
      if (modelReference != null)
        msgs = ((InternalEObject)modelReference).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SedmlPackage.TASK__MODEL_REFERENCE, null, msgs);
      if (newModelReference != null)
        msgs = ((InternalEObject)newModelReference).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SedmlPackage.TASK__MODEL_REFERENCE, null, msgs);
      msgs = basicSetModelReference(newModelReference, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SedmlPackage.TASK__MODEL_REFERENCE, newModelReference, newModelReference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public uniformTimeCourse getSimulationReference()
  {
    return simulationReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimulationReference(uniformTimeCourse newSimulationReference, NotificationChain msgs)
  {
    uniformTimeCourse oldSimulationReference = simulationReference;
    simulationReference = newSimulationReference;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SedmlPackage.TASK__SIMULATION_REFERENCE, oldSimulationReference, newSimulationReference);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimulationReference(uniformTimeCourse newSimulationReference)
  {
    if (newSimulationReference != simulationReference)
    {
      NotificationChain msgs = null;
      if (simulationReference != null)
        msgs = ((InternalEObject)simulationReference).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SedmlPackage.TASK__SIMULATION_REFERENCE, null, msgs);
      if (newSimulationReference != null)
        msgs = ((InternalEObject)newSimulationReference).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SedmlPackage.TASK__SIMULATION_REFERENCE, null, msgs);
      msgs = basicSetSimulationReference(newSimulationReference, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SedmlPackage.TASK__SIMULATION_REFERENCE, newSimulationReference, newSimulationReference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SedmlPackage.TASK__MODEL_REFERENCE:
        return basicSetModelReference(null, msgs);
      case SedmlPackage.TASK__SIMULATION_REFERENCE:
        return basicSetSimulationReference(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SedmlPackage.TASK__MODEL_REFERENCE:
        return getModelReference();
      case SedmlPackage.TASK__SIMULATION_REFERENCE:
        return getSimulationReference();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SedmlPackage.TASK__MODEL_REFERENCE:
        setModelReference((model)newValue);
        return;
      case SedmlPackage.TASK__SIMULATION_REFERENCE:
        setSimulationReference((uniformTimeCourse)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SedmlPackage.TASK__MODEL_REFERENCE:
        setModelReference((model)null);
        return;
      case SedmlPackage.TASK__SIMULATION_REFERENCE:
        setSimulationReference((uniformTimeCourse)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SedmlPackage.TASK__MODEL_REFERENCE:
        return modelReference != null;
      case SedmlPackage.TASK__SIMULATION_REFERENCE:
        return simulationReference != null;
    }
    return super.eIsSet(featureID);
  }

} //taskImpl
